[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pantheon-agents"
version = "0.2.0"
description = "A quality-focused agents library for Claude Code with Spec Kit integration"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Alex Abrams", email = "alex@example.com" }
]
keywords = ["claude-code", "spec-kit", "agents", "quality", "testing", "development"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.1.0",
    "pyyaml>=6.0",
]

# Note: Spec Kit is not on PyPI yet. Pantheon supports Spec Kit v0.0.55+
# Install Spec Kit via: uv tool install specify-cli --from git+https://github.com/github/spec-kit.git
# Pantheon automatically detects both old (pre-v0.0.57) and new (v0.0.57+) command formats

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "types-PyYAML>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/alex-abrams711/pantheon"
Repository = "https://github.com/alex-abrams711/pantheon"
Issues = "https://github.com/alex-abrams711/pantheon/issues"

[project.scripts]
pantheon = "pantheon.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/pantheon"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["pantheon"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
